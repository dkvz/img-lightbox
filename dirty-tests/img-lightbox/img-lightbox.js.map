{"version":3,"sources":["img-lightbox.js"],"names":["ImgLightbox","loaderSvgUrl","require","loading","attachShadow","mode","HTMLElement","shadowRoot","innerHTML","template","overlay","querySelector","loadingOverlay","link","img","fullImage","getAttribute","addEventListener","showLightbox","bind","e","preventDefault","_showOverlay","showImage","document","createElement","src","tabIndex","forEach","type","_hideOverlay","currentTarget","appendChild","style","transform","focus","display","prototype"],"mappings":"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","file":"img-lightbox.js","sourceRoot":"../src/shadow","sourcesContent":["const loaderSvgUrl = require('../../assets/hourglass.svg');\n\nclass ImgLightbox extends HTMLElement {\n\n  constructor() {\n    super();\n    this.loading = false;\n    this.attachShadow({mode: 'open'});\n  }\n\n  connectedCallback() {\n    // Template is added to prototype below the \n    // class definition.\n    this.shadowRoot.innerHTML = this.template;\n    // Get some element references from shadow DOM:\n    this.overlay = this.shadowRoot.querySelector('#overlay');\n    this.loadingOverlay = this.shadowRoot.querySelector('#loader');\n    // The slotted elements are actually not in \n    // the shadow DOM so we can get them like so:\n    const link = this.querySelector('a');\n    const img = this.querySelector('img');\n    if (link) {\n      // Store the URL as the full image URL:\n      this.fullImage = link.getAttribute('href');\n      // Register a click event that has to \n      // prevent default:\n      link.addEventListener('click', this.showLightbox.bind(this));\n    } else if (img) {\n      this.fullImage = img.getAttribute('src');\n      img.addEventListener('click', this.showLightbox.bind(this));\n    }\n  }\n\n  showLightbox(e) {\n    e.preventDefault();\n    // Implement some kind of lock:\n    if (!this.loading) {\n      this.loading = true;\n      // Preload the full image.\n      // Show the spinner overlay:\n      this._showOverlay(this.loadingOverlay);\n      if (!this.img) {\n        this.img = document.createElement('img');\n        this.img.addEventListener('load', () => this.showImage());\n        this.img.src = this.fullImage;\n        this.img.tabIndex = 1;\n        // Prepare the events to close the overlay.\n        // I'm doing this here to light up what's\n        // happening in connectedCallback.\n        ['click', 'keydown'].forEach(\n          (type) => \n            this.overlay.addEventListener(\n              type, \n              (e) => this._hideOverlay(e.currentTarget)\n            )\n        );\n        this.overlay.appendChild(this.img);\n      } else {\n        this.showImage();\n      }\n    }\n  }\n\n  showImage() {\n    this.img.style.transform = 'scale(0.1)';\n    // Hide the loading overlay:\n    this._hideOverlay(this.loadingOverlay);\n    this._showOverlay(this.overlay);\n    // Focus the overlay (requires it to have a tabIndex):\n    this.overlay.focus();\n    // Start the CSS transition:\n    this.img.style.transform = 'scale(1)';\n    // Don't forget to unlock the click event:\n    this.loading = false;\n  }\n\n  _showOverlay(overlay) {\n    overlay.style.display = 'flex';\n  }\n\n  _hideOverlay(overlay) {\n    overlay.style.display = '';\n  }\n\n}\n\n// The loader image should be cached, inlining it\n// will create tons of copies of SVG nodes.\nImgLightbox.prototype.template = /*template*/`\n<style>\n  :host {\n    display: inline-block;\n    cursor: pointer;\n    position: relative;\n  }\n\n  #loader {\n    position: absolute;\n    z-index: 1;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0,0,0,.2);\n    display: none;\n    align-items: center;\n    justify-content: center;\n  }\n\n  #overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    overflow: hidden;\n    z-index: 999;\n    background-color: rgba(0,0,0,.5);\n    display: none;\n    align-items: center;\n    justify-content: center;\n  }\n\n  #loader img {\n    width: 50%;\n    opacity: 0.6;\n    animation: lightbox-loader 2s infinite;\n  }\n\n  #overlay img {\n    max-width: 100%;\n    max-height: 100%;\n    transition: transform 0.8s;\n  }\n\n  @keyframes lightbox-loader {\n    0% {transform: rotate(0deg);}\n    100% {transform: rotate(360deg);}\n  }\n</style>\n<slot></slot>\n<div id=\"overlay\" tabindex=\"0\"></div>\n<div id=\"loader\">\n  <img src=\"${loaderSvgUrl}\">\n</div>\n`;\n\nexport default ImgLightbox;"]}